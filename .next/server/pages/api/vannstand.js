"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/vannstand";
exports.ids = ["pages/api/vannstand"];
exports.modules = {

/***/ "(api)/./pages/api/vannstand.js":
/*!********************************!*\
  !*** ./pages/api/vannstand.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n// Store api-key in environment\nconst NVE_API_KEY = process.env.NVE_API_KEY;\n// NVE-Api constants\nconst _base = \"https://hydapi.nve.no\";\nconst _path = \"/api/v1/Observations?\";\nconst _stationId = \"2.101.0\";\nconst _parameter = \"1000\";\nconst _resolutionTime = \"hour\";\n// Endpoint constants\nconst OFFSETHOURS = -2;\nconst DAYSPAN = 7;\nconst MINDAYSPAN = 1;\nconst MAXDAYSPAN = 15;\nconst MINFULLYEAR = 2017;\nconst MAXFULLYEAR = new Date().getFullYear() + 1;\nconst TODAYDATE = new Date(new Date(new Date(new Date().setHours(0)).setMinutes(0)).setSeconds(0));\n// Validate date-inputs ref constants\nconst validateInputDate = (dateParam)=>{\n    const dateObject = new Date(parseInt(dateParam));\n    if (dateObject.getTime()) {\n        if (dateObject.getFullYear() > MINFULLYEAR && dateObject.getFullYear() < MAXFULLYEAR) {\n            return true;\n        }\n    }\n    return false;\n};\n// Validate daycount ref constants\nconst validateDayCount = (daycountParam)=>{\n    if (parseInt(daycountParam) >= MINDAYSPAN && parseInt(daycountParam) <= MAXDAYSPAN) {\n        return true;\n    }\n    return false;\n};\n// Validate query-params\nconst validateParams = async (req)=>{\n    let fromDate, toDate, dayCount;\n    if (req.query.fromdate && validateInputDate(req.query.fromdate)) {\n        fromDate = new Date(parseInt(req.query.fromdate));\n        fromDate = formatDate(fromDate);\n    }\n    if (req.query.todate && validateInputDate(req.query.todate)) {\n        toDate = new Date(parseInt(req.query.todate));\n        toDate = formatDate(toDate, OFFSETHOURS - 1);\n    }\n    if (req.query.daycount && validateDayCount(req.query.daycount)) {\n        dayCount = parseInt(req.query.daycount);\n    }\n    return {\n        fromDate,\n        toDate,\n        dayCount\n    };\n};\n// Format date to NVE-api iso\nconst formatDate = (date, offset = OFFSETHOURS)=>{\n    let dateObject = new Date(date);\n    // offset for zulu time\n    dateObject = new Date(dateObject.setHours(offset));\n    const year = dateObject.getFullYear();\n    let month = dateObject.getMonth() + 1;\n    month = month < 10 ? \"0\" + month : month;\n    let day = dateObject.getDate();\n    day = day < 10 ? \"0\" + day : day;\n    let hour = dateObject.getHours();\n    hour = hour < 10 ? \"0\" + hour : hour;\n    // return `${year}-${month}-${day}T${hour}:00`;\n    return `${year}-${month}-${day}T${hour}:00`;\n};\n// Format NVE-api parameter referenceTime based on inputs\nconst formatReferenceTime = ({ fromDate , toDate , dayCount  })=>{\n    /**\r\n     *  Valid parameter combinations\r\n     *\r\n     *  - fromDate && toDate && dayCount | use fromDate and toDate\r\n     *  - fromDate && toDate\r\n     *  - fromDate && dayCount\r\n     *  - toDate && dayCount\r\n     *  - dayCount | use Now() for toDate\r\n     *  - fromDate OR toDate - use $DAYSPAN\r\n     *  - no params | use Now() for toDate and $DAYSPAN for dayCount\r\n     *\r\n     *  */ if (fromDate && toDate) {\n        return `${fromDate}/${toDate}`;\n    }\n    if (fromDate && dayCount) {\n        return `${fromDate}/P${dayCount}D`;\n    }\n    if (toDate && dayCount) {\n        return `P${dayCount}D/${toDate}`;\n    }\n    if (dayCount) {\n        let today = formatDate(TODAYDATE, OFFSETHOURS);\n        return `P${dayCount}D/${today}`;\n    }\n    if (fromDate) {\n        return `P${DAYSPAN}D/${fromDate}`;\n    }\n    if (toDate) {\n        return `${fromDate}/P${DAYSPAN}D`;\n    }\n    let today1 = formatDate(TODAYDATE, OFFSETHOURS);\n    return `P${DAYSPAN}D/${today1}`;\n};\n// Request data from NVE\nasync function getData(url = \"\", data = {}) {\n    const response = await fetch(url, {\n        method: \"GET\",\n        mode: \"no-cors\",\n        // cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n        // credentials: \"same-origin\", // include, *same-origin, omit\n        headers: {\n            \"Content-Type\": \"text/plain;charset=UTF-8\",\n            \"x-api-key\": NVE_API_KEY\n        }\n    });\n    const measures = await response.json(); // parses JSON response into native JavaScript objects\n    return measures;\n}\n/**\r\n *\r\n *\r\n * @param {*} req\r\n * @param {*} res\r\n */ async function handler(req, res) {\n    const reqParams = await validateParams(req);\n    // sjekk CacheDB for data\n    const referenceTime = formatReferenceTime(reqParams);\n    const EndPoint = `${_base}${_path}StationId=${_stationId}&Parameter=${_parameter}&ResolutionTime=${_resolutionTime}&ReferenceTime=${referenceTime}`;\n    try {\n        const vannstandData = await getData(EndPoint, {}).then((data)=>{\n            return data;\n        });\n        // Legg data i CacheDB\n        res.status(200).send({\n            vannstandData\n        });\n    } catch  {\n        res.status(500).json({\n            error: \"failed to load data\"\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/vannstand.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/vannstand.js"));
module.exports = __webpack_exports__;

})();